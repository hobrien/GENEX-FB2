from GetSequences import get_sequences
configfile: "config.yaml"

files=get_sequences(config['seqfile'])

rule all:
    input:
        expand("Kallisto/{gene}_{k}/abundance.tsv", gene=['ENSG00000214367'], k=[75])

rule gtf_to_bed:
    input:
        config['gtf']
    output:
        "Reference/genes.bed"
    run:
       with open(input[0], 'r') as gtf:
           with open(output[0], 'w') as out_fh:
                for line in gtf.readlines():
                    line=line.strip()
                    fields = line.split('\t')
                    if fields[2] == 'gene':
                        attributes = fields[8]
                        attributes = attributes.replace('"', '')
                        attribute_dict = {item.split()[0]: ' '.join(item.split()[1:]) for item in attributes[:-1].split('; ')}
                        out_fh.write('\t'.join([fields[0], # chrom
                                         fields[3], # chromStart
                                         fields[4], # chromEnd
                                         attribute_dict['gene_id'].split('.')[0], # name (remove version number after dot)
                                         '0', # score
                                         fields[6], # strand
                                         fields[3], # thickStart
                                         fields[4], # thickEnd
                                         '0', # itemRgb
                                         '1', # blockCount
                                         str(int(fields[4])-int(fields[3])+1), # blockSizes
                                         '0' # blockStarts
                                         ])+'\n')


rule transcript_seqs:
    input:
        bed = rules.gtf_to_bed.output,
        fasta = config['refseq']
    output:
        "Reference/genes.fa"
    shell:
        "bedtools getfasta -fi {input.fasta} -bed {input.bed} -split -name -s "
        "| perl -pe 's/\([+-]\)//' > {output}; samtools faidx {output}"

rule shred_gene:
    input:
        rules.transcript_seqs.output
    output:
        "Reference/{gene}_{k}mers.fa"
    params:
        k="{k}",
        gene="{gene}"
    run:
        def shred_transcript(seq, k):
            kmers = []
            for i in range(0, len(seq)-k+1):
                kmers.append(seq[i:i+k])
            return(kmers)

        p = Popen(['samtools', 'faidx', input[0], params['gene']], stdout=PIPE, stderr=PIPE)
        seq, err = p.communicate()
        # remove first line from sequence (fasta header)
        seq = ''.join(seq.split('\n')[1:])
        with open(output[0], 'w') as out_fh:
            i = 1
            for kmer in shred_transcript(seq, params['k']):
                out_fh.write('\n'.join(['>seq' + str(i), kmer]))

rule run_kalliso:
    input:
        index = config['kallisto_index'],
        reads = rules.shred_gene.output
    output:
        "Kallisto/{gene}_{k}/abundance.h5",
        "Kallisto/{gene}_{k}/abundance.tsv",
        "Kallisto/{gene}_{k}/run_info.json"
    params:
        prefix = "Kallisto/{gene}_{k}"
    log:
        "Logs/kallisto_quant_{gene}_{k}.txt"
    shell:
        "(kallisto quant -i {input.index} -o {params.prefix} --bias -b 100 --rf-stranded {input.reads}) 2> {log}"


